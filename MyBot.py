import random
import re
import schedule
import json
import asyncio
import telebot
from telebot import types
from telebot.types import Message
import time
from envparse import Env

env = Env()
TOKEN = env.str('TOKEN')
bot = telebot.TeleBot(token=TOKEN, parse_mode='MARKDOWN')



@bot.message_handler(commands=['start'])
def start(message):

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)

    btn1 = types.KeyboardButton("üìï –û–± –∞–≤—Ç–æ—Ä–µ")
    btn2 = types.KeyboardButton('üèπ –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É')
    markup.add(btn2, btn1)
    with open('reg.json', 'r') as f_o:
        data_from_json = json.load(f_o)
# –û–û–ü = user_id, username
    user_id = message.from_user.id
    username = message.from_user.first_name
    user_exists = False
    for user_data in data_from_json:
        if str(user_id) in user_data:
            user_exists = True
            bot.reply_to(message=message,text='–¢—ã —É–∂–µ –Ω–∞—á–∞–ª –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å —Å–æ –º–Ω–æ–π, –Ω–æ —è –Ω–∞–ø–æ–º–Ω—é, —á—Ç–æ –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –≤ –º–µ–Ω—é üòâ', reply_markup=markup)
            break

        if not user_exists:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –≤ —Å–ø–∏—Å–æ–∫
        user_id = str(user_id)
        data_from_json[user_id] = {'username': username}
        with open('reg.json', 'w') as f_o:
            json.dump(data_from_json, f_o, indent=4, ensure_ascii=False)
        bot.reply_to(message=message, text=f'''–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π, *{message.from_user.first_name} üòé‚Äç*!
    
*–ù–µ–º–Ω–æ–≥–æ –æ–±–æ –º–Ω–µ:* –Ø —Ç–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫, —è –º–æ–≥—É –ø–æ–º–æ–≥–∞—Ç—å —Ç–µ–±–µ –ø—Ä–∏ –∏–∑—É—á–µ–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞.
–í–æ–æ–±—â–µ —è –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ, –Ω–æ —è –¥—É–º–∞—é, —á—Ç–æ –º–æ–π —Ö–æ–∑—è–∏–Ω –±—É–¥–µ—Ç –ø—Ä–æ—Ç–∏–≤, –µ—Å–ª–∏ —Ç—ã –±—É–¥–µ—à—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º–µ–Ω—è –¥–ª—è –¥—Ä—É–≥–∏—Ö —Ü–µ–ª–µ–π ü§´
\n‚ö†Ô∏è *–ü–æ–¥—Å–∫–∞–∑–∫–∞:* –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å–æ –º–Ω–æ–π –∏—Å–ø–æ–ª—å–∑—É–π –º–µ–Ω—é.''', reply_markup=markup)



@bot.message_handler(commands=['words'])
def words(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    time_60 = types.KeyboardButton("‚è∞ 1 —á–∞—Å")
    time_180 = types.KeyboardButton('üïú 3 —á–∞—Å–∞')
    time_480 = types.KeyboardButton('üï£ 9 —á–∞—Å–æ–≤')
    time_1240 = types.KeyboardButton('üïõ 24 —á–∞—Å–∞')


    markup.add(time_60, time_180, time_480, time_1240)
    bot.reply_to(message=message, text=f"""–û—Ç–ø—Ä–∞–≤—å –∑–∞–¥–µ—Ä–∂–∫—É, –≤–æ—Ç —Ç–∞–∫: \n
*60* \n \n(–ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ —Å–ª–æ–≤ –ø—Ä–æ–∏–∑–æ–π–¥–µ—Ç —á–µ—Ä–µ–∑ 60 –º–∏–Ω—É—Ç, –≤—Å–µ–≥–æ 2 –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è), —Ç–∞–∫–∂–µ –º–æ–∂–µ—à—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–Ω–æ–ø–∫–∏ –≤ –ø–∞–Ω–µ–ª–∏ üòâ""", reply_markup=markup)

    bot.register_next_step_handler(message, write)



def write(message):


    username = message.from_user.first_name
    text = message.text
    user_id = message.from_user.id
    if text == "‚è∞ 1 —á–∞—Å":
        text = 60
    elif text == 'üïú 3 —á–∞—Å–∞':
        text = 180
    elif text == 'üï£ 9 —á–∞—Å–æ–≤':
        text = 480
    elif text == 'üïõ 24 —á–∞—Å–∞':
        text = 1240
    else:
        text = message.text
        try:
            text = int(text)
        except ValueError:
            bot.reply_to(message, text='‚ö†Ô∏è –ó–ê–î–ï–†–ñ–ö–ê –î–û–õ–ñ–ù–ê –ë–´–¢–¨ –£–ö–ê–ó–ê–ù–ê –í –¶–ò–§–†–ê–•!!!')
            return words(message)
        print(text)
    try:

        user_exists = False
        with open('time_user.json', 'r') as f_o:
            data_from_json = json.load(f_o)
        for item in data_from_json:
            if str(user_id) in item:
                bot.reply_to(message=message, text='–í—ã —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ. –ï—Å–ª–∏ –∂–µ–ª–∞–µ—Ç–µ —É–¥–∞–ª–∏—Ç—å —Ç–µ–∫—É—â–∏–µ —Å–ª–æ–≤–∞ - /delete')
                user_exists = True
                return

        if user_exists == False:
            user_id = str(user_id)
            data_from_json[user_id] = {'time': text, 'counter': 2, 'const_time': text}

            bot.reply_to(message=message, text=f'''–û—Ç–ª–∏—á–Ω–æ, –≤—Ä–µ–º—è –∑–∞–¥–µ—Ä–∂–∫–∏ *{text} –º–∏–Ω—É—Ç(–∞)*''')


            with open('time_user.json', 'w') as f_o:
                json.dump(data_from_json, f_o, indent=4, ensure_ascii=False)
            complete_remind(message)

    except ValueError:
        if type(int(text)) != int:
            bot.reply_to(message=message, text=f'–í—Ä–µ–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —É–∫–∞–∑–∞–Ω–æ –≤ –º–∏–Ω—É—Ç–∞—Ö!')
            words(message)


def complete_remind(message):

    user_id = message.from_user.id

    with open('word.json', 'r') as f_o:
        data_from_json = json.load(f_o)

    word = random.choices(list(data_from_json['words'].items()), k=4)

    four_words = ''
    translate = dict(word)
    for i in word:
        four_words += ' ‚Äî '.join(i) + ", "

        with open('time_user.json', 'r') as f_o:
            time_json = json.load(f_o)

        for s in time_json:
            if s == str(user_id):
                time_json[s]['Translate'] = translate
                time_json[s]['Four_words'] = four_words[:-2]

        with open('time_user.json', 'w') as f_o:
            json.dump(time_json, f_o, indent=4, ensure_ascii=False)

    bot.send_message(user_id, text=f'–í–∞—à–∏ —Å–ª–æ–≤–∞ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è: {four_words[:-2]}')


def update(message):
    complete_remind()



@bot.message_handler(commands=['delete'])
def delete(message):
    user_id = message.from_user.id
    with open('time_user.json', 'r') as f_o:
        data_from_json = json.load(f_o)

    for user in list(data_from_json):
        if str(user_id) == user:
            del data_from_json[user]


    with open('time_user.json', 'w') as f_o:
        json.dump(data_from_json, f_o, indent=4, ensure_ascii=False)


    bot.reply_to(message, text="‚úÖ –ì–æ—Ç–æ–≤–æ, –≤–∞—à–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –±—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã.")



@bot.message_handler(commands=['test'])
def complete(message):
    print(1)
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    with open('time_user.json', 'r') as f_o:
        data_json = json.load(f_o)

    for user in data_json:
        if user == str(message.from_user.id):

            random_word = random.choice(list(data_json[user]['Translate'].keys()))
            print(random_word)
            ok = list((data_json[user]['Translate'].values()))
            word1, word2, word3, word4 = types.KeyboardButton(ok[0]), types.KeyboardButton(
                ok[1]), types.KeyboardButton(ok[2]), types.KeyboardButton(ok[3])
            markup.add(word1, word2, word3, word4)
            bot.send_message(int(user), text=f'–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–µ—Ä–µ–≤–æ–¥ —Å–ª–æ–≤–∞ {random_word}', reply_markup=markup)
            bot.register_next_step_handler(message, next_step, user, random_word)


def next_step(message, user, random_word):
    with open('time_user.json', 'r') as f_o:
        data_json = json.load(f_o)

    it_word = data_json[str(user)]['Translate'].get(random_word)
    print(it_word, '\n', random_word)
    print(message.text)

    if message.text == it_word:
        bot.send_message(int(user), text='–í—Å—ë –≤–µ—Ä–Ω–æ.')



        del data_json[user]

        with open('time_user.json', 'w') as f_o:
            json.dump(data_json, f_o, indent=4, ensure_ascii=False)
        words(message)


    else:
        bot.send_message(int(user), text='–ù–µ–≤–µ—Ä–Ω–æ.')
        data_json[str(message.from_user.id)]['time'] = data_json[message.from_user.id]['const_time']
        complete(message)






bot.polling()
